<?xml version="1.0" encoding="UTF-8"?>
<template xmlns="http://ws.apache.org/ns/synapse" name="getBlogUsers">

    <!--Optional Parameters-->
    <parameter name="http_envelope" description="Set HTTP status code to always be 200. The JSON response is wrapped in an 'envelope' containing the 'real' HTTP status code and headers.default(false)"/>
    <parameter name="pretty" description="if true Output pretty JSON.default(false)"/>
    <parameter name="meta" description="Loads data from the endpoints found in the 'meta' part of the response"/>
    <parameter name="fields" description="Return only the specified fields"/>
    <parameter name="number" description="Limit the total number of authors returned"/>
    <parameter name="offset" description="The first n authors to be skipped in the returned result"/>
    <parameter name="order" description="DESC or ASC"/>
    <parameter name="order_by" description="The order field"/>
    <parameter name="authors_only" description="Set to true to fetch authors only"/>
    <parameter name="type" description="Specify the post type to query authors for. Only works when combined with the `authors_only` flag"/>

    <sequence>

        <!--Optional Query Parameters-->
        <property name="uri.var.http_envelope" expression="$func:http_envelope"/>
        <property name="uri.var.pretty" expression="$func:pretty" />
        <property name="uri.var.meta" expression="$func:meta" />
        <property name="uri.var.fields" expression="$func:fields" />
        <property name="uri.var.number" expression="$func:number" />
        <property name="uri.var.offset" expression="$func:offset" />
        <property name="uri.var.order" expression="$func:order" />
        <property name="uri.var.order_by" expression="$func:order_by" />
        <property name="uri.var.authors_only" expression="$func:authors_only" />
        <property name="uri.var.type" expression="$func:type" />

        <!--Building the query with optional query parameters-->

        <filter
                xpath="(not(get-property('uri.var.http_envelope') = '' or (not(string(get-property('uri.var.http_envelope'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'http_envelope=',get-property('uri.var.http_envelope'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.pretty') = '' or (not(string(get-property('uri.var.pretty'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'pretty=',get-property('uri.var.pretty'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.fields') = '' or (not(string(get-property('uri.var.fields'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'fields=',get-property('uri.var.fields'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.meta') = '' or (not(string(get-property('uri.var.meta'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'meta=',get-property('uri.var.meta'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.number') = '' or (not(string(get-property('uri.var.number'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'number=',get-property('uri.var.number'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.offset') = '' or (not(string(get-property('uri.var.offset'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'offset=',get-property('uri.var.offset'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.order') = '' or (not(string(get-property('uri.var.order'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'order=',get-property('uri.var.order'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.order_by') = '' or (not(string(get-property('uri.var.order_by'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'order_by=',get-property('uri.var.order_by'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.authors_only') = '' or (not(string(get-property('uri.var.authors_only'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'authors_only=',get-property('uri.var.authors_only'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.type') = '' or (not(string(get-property('uri.var.type'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'type=',get-property('uri.var.type'),'&amp;')" />
            </then>
        </filter>

        <property name="uri.var.wp_resource_uri" expression="fn:concat('https://public-api.wordpress.com/rest/v1/sites/',get-property('uri.var.wp_site_domain'),'/users')" />


        <call>
            <endpoint>
                <http method="GET" uri-template="{uri.var.wp_resource_uri}?{uri.var.queryParameters}" />
            </endpoint>
        </call>

        <!-- Remove response's custom header information -->
        <header name="X-Prefork" scope="transport" action="remove" />
        <header name="X-hacker" scope="transport" action="remove" />

    </sequence>
</template>
