<?xml version="1.0" encoding="UTF-8"?>
<template xmlns="http://ws.apache.org/ns/synapse" name="getComments">

    <!--Mandatory Parameter-->
    <parameter name="site" description="The site ID or The site domain to get comments"/>
    <parameter name="post_id" description="The post ID"/>

    <!--optional Query parameters-->
    <parameter name="http_envelope" description="Set HTTP status code to always be 200. The JSON response is wrapped in an 'envelope' containing the 'real' HTTP status code and headers.default(false)"/>
    <parameter name="pretty" description="if true Output pretty JSON.default(false)"/>
    <parameter name="meta" description="Loads data from the endpoints found in the 'meta' part of the response"/>
    <parameter name="fields" description="Return only the specified fields"/>
    <parameter name="number" description="The number of comments to return. Limit: 100. Default: 20"/>
    <parameter name="offset" description="0-indexed offset"/>
    <parameter name="page" description="Return the Nth 1-indexed page of comments. Takes precedence over the offset parameter"/>
    <parameter name="order" description="DESC or ASC"/>
    <parameter name="after" description="Return comments dated on or after the specified datetime(iso 8601 datetime)"/>
    <parameter name="before" description="Return comments dated on or before the specified datetime(iso 8601 datetime)"/>
    <parameter name="type" description="(any | comment | trackback | pingback | pings)" />
    <parameter name="status" description="(approved | unapproved | trash | spam | all)" />


    <sequence>
        <!--Mandatory Parameter-->
        <property name="uri.var.site" expression="$func:site"/>
        <property name="uri.var.post_id" expression="$func:post_id"/>

        <!-- Building the URL with the query parameters -->
        <property name="uri.var.http_envelope" expression="$func:http_envelope"/>
        <property name="uri.var.pretty" expression="$func:pretty" />
        <property name="uri.var.meta" expression="$func:meta" />
        <property name="uri.var.fields" expression="$func:fields" />
        <property name="uri.var.number" expression="$func:number" />
        <property name="uri.var.offset" expression="$func:offset" />
        <property name="uri.var.page" expression="$func:page" />
        <property name="uri.var.order" expression="$func:order" />
        <property name="uri.var.after" expression="$func:after" />
        <property name="uri.var.before" expression="$func:before" />
        <property name="uri.var.type" expression="$func:type" />
        <property name="uri.var.status" expression="$func:status" />

        <filter
                xpath="(not(get-property('uri.var.http_envelope') = '' or (not(boolean(get-property('uri.var.http_envelope'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'http_envelope=',get-property('uri.var.http_envelope'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.pretty') = '' or (not(boolean(get-property('uri.var.pretty'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'pretty=',get-property('uri.var.pretty'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.meta') = '' or (not(string(get-property('uri.var.meta'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'meta=',get-property('uri.var.meta'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.fields') = '' or (not(string(get-property('uri.var.fields'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'fields=',get-property('uri.var.fields'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.number') = '' or (not(number(get-property('uri.var.number'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'number=',get-property('uri.var.number'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.offset') = '' or (not(number(get-property('uri.var.offset'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'offset=',get-property('uri.var.offset'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.page') = '' or (not(number(get-property('uri.var.page'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'page=',get-property('uri.var.page'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.order') = '' or (not(string(get-property('uri.var.order'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'order=',get-property('uri.var.order'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.after') = '' or (not(string(get-property('uri.var.after'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'after=',get-property('uri.var.after'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.before') = '' or (not(string(get-property('uri.var.before'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'before=',get-property('uri.var.before'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.type') = '' or (not(string(get-property('uri.var.type'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'type=',get-property('uri.var.type'),'&amp;')" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.status') = '' or (not(string(get-property('uri.var.status'))))))">
            <then>
                <property name="uri.var.queryParameters"
                          expression="fn:concat(get-property('uri.var.queryParameters'),'status=',get-property('uri.var.status'),'&amp;')" />
            </then>
        </filter>


        <property name="uri.var.wp_resource_uri" expression="fn:concat('https://public-api.wordpress.com/rest/v1/sites/',get-property('uri.var.site'),'/posts/',get-property('uri.var.post_id'), '/replies/')" />

        <call>
            <endpoint>
                <http method="GET" uri-template="{uri.var.wp_resource_uri}?{uri.var.queryParameters}" />
            </endpoint>
        </call>

        <!-- Remove response's custom header information -->
        <header name="X-Prefork" scope="transport" action="remove" />
        <header name="X-hacker" scope="transport" action="remove" />

    </sequence>
</template>